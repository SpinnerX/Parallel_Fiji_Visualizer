// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$13 {

    static final FunctionDescriptor fileno_unlocked$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle fileno_unlocked$MH = RuntimeHelper.downcallHandle(
        "fileno_unlocked",
        constants$13.fileno_unlocked$FUNC, false
    );
    static final FunctionDescriptor pclose$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pclose$MH = RuntimeHelper.downcallHandle(
        "pclose",
        constants$13.pclose$FUNC, false
    );
    static final FunctionDescriptor popen$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle popen$MH = RuntimeHelper.downcallHandle(
        "popen",
        constants$13.popen$FUNC, false
    );
    static final FunctionDescriptor ctermid$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ctermid$MH = RuntimeHelper.downcallHandle(
        "ctermid",
        constants$13.ctermid$FUNC, false
    );
    static final FunctionDescriptor flockfile$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle flockfile$MH = RuntimeHelper.downcallHandle(
        "flockfile",
        constants$13.flockfile$FUNC, false
    );
    static final FunctionDescriptor ftrylockfile$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ftrylockfile$MH = RuntimeHelper.downcallHandle(
        "ftrylockfile",
        constants$13.ftrylockfile$FUNC, false
    );
}


