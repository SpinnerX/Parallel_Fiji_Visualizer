// Generated by jextract

package org.unix;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$6 {

    static final FunctionDescriptor vscanf$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vscanf$MH = RuntimeHelper.downcallHandle(
        "vscanf",
        constants$6.vscanf$FUNC, false
    );
    static final FunctionDescriptor vsscanf$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle vsscanf$MH = RuntimeHelper.downcallHandle(
        "vsscanf",
        constants$6.vsscanf$FUNC, false
    );
    static final FunctionDescriptor fgetc$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle fgetc$MH = RuntimeHelper.downcallHandle(
        "fgetc",
        constants$6.fgetc$FUNC, false
    );
    static final FunctionDescriptor getc$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getc$MH = RuntimeHelper.downcallHandle(
        "getc",
        constants$6.getc$FUNC, false
    );
    static final FunctionDescriptor getchar$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle getchar$MH = RuntimeHelper.downcallHandle(
        "getchar",
        constants$6.getchar$FUNC, false
    );
    static final FunctionDescriptor getc_unlocked$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle getc_unlocked$MH = RuntimeHelper.downcallHandle(
        "getc_unlocked",
        constants$6.getc_unlocked$FUNC, false
    );
}


